/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Telas;

import DAO.DaoLocais;
import DAO.DaoModalidades;
import DAO.DaoTurmas;
import com.mycompany.isports.Locais;
import com.mycompany.isports.ModalidadesEsportivas;
import com.mycompany.isports.Turmas;
import java.util.Arrays;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;


public class TelaTurmas extends javax.swing.JFrame {

    private DaoTurmas daoTurmas;
    private DaoModalidades daoModalidades;
    private DaoLocais daoLocais;
    
    public TelaTurmas() {
        initComponents();
        daoTurmas = new DaoTurmas();
        daoModalidades = new DaoModalidades(); // Inicializa o objeto daoModalidades
        daoLocais = new DaoLocais(); 
        carregarModalidades(); // Chama o método para carregar as modalidades
        carregarLocais();
        carregarTurmas(); // Chama o método para carregar as turmas
    }

    private void carregarModalidades() {
        try {
            List<ModalidadesEsportivas> modalidades = daoModalidades.obterModalidades();
            for (ModalidadesEsportivas modalidade : modalidades) {
                ComboBoxIdModalidade.addItem(modalidade);
        }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao carregar modalidades.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void limparLista(List<Turmas> lista) {
        lista.clear();
    }
    
    private void carregarTurmas() {
        try {

            List<Turmas> turmas = daoTurmas.obterTurmas();
            limparLista(turmas);
            turmas = daoTurmas.obterTurmas();
            for (Turmas turma : turmas) {
                ComboBoxIdTurma.addItem(turma); // Adicione o nome da turma como uma representação em forma de String
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao carregar turmas.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    
private void carregarLocais() {
    try {
        DaoLocais daoLocais = new DaoLocais();
        Locais[] locaisArray = daoLocais.obterLocais(); // Assuming obterLocais() returns an array

        List<Locais> locais = Arrays.asList(locaisArray); // Convert array to List

        for (Locais local : locais) {
            ComboBoxIdLocal.addItem(local);
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro ao carregar Locais.", "Erro", JOptionPane.ERROR_MESSAGE);
    }
}




    private void limparCampos() {
        txtVagas.setText("");
        txtDiasAulas.setText("");
        txtHorario.setText("");
        ComboBoxIdModalidade.setSelectedIndex(0);
        ComboBoxIdLocal.setSelectedIndex(0);
        
    }

    private void exibirMensagem(String mensagem) {
           JOptionPane.showMessageDialog(this, mensagem, "Mensagem", JOptionPane.INFORMATION_MESSAGE);
           
            TelaTurmas turma = new TelaTurmas();
            turma.setVisible(true);
            this.dispose();
    }

    private void refreshCampos() {
    try {
        // Obtenha a turma selecionada no ComboBox
        Turmas turma = (Turmas) ComboBoxIdTurma.getSelectedItem();

        // Preencha os campos de texto com os valores da turma
        txtVagas.setText(turma.getVagas());
        txtDiasAulas.setText(turma.getDiasAulas());
        txtHorario.setText(turma.getHorario());

        // Selecione a modalidade e o local da turma nos ComboBoxes
        ComboBoxIdModalidade.setSelectedItem(turma.getIdModalidade());
        ComboBoxIdLocal.setSelectedItem(turma.getIdLocal());

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro ao atualizar campos.", "Erro", JOptionPane.ERROR_MESSAGE);
    }
}
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        ComboBoxIdModalidade = new javax.swing.JComboBox<>();
        ComboBoxIdLocal = new javax.swing.JComboBox<>();
        ComboBoxIdTurma = new javax.swing.JComboBox<>();
        txtVagas = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDiasAulas = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtHorario = new javax.swing.JTextPane();
        btnCriar = new javax.swing.JButton();
        btnDeletar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnAtualizar = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ComboBoxIdModalidade.setBorder(javax.swing.BorderFactory.createTitledBorder("Modalidade"));
        ComboBoxIdModalidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxIdModalidadeActionPerformed(evt);
            }
        });

        ComboBoxIdLocal.setBorder(javax.swing.BorderFactory.createTitledBorder("Local"));
        ComboBoxIdLocal.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ComboBoxIdLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxIdLocalActionPerformed(evt);
            }
        });

        ComboBoxIdTurma.setBorder(javax.swing.BorderFactory.createTitledBorder("Turma"));
        ComboBoxIdTurma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxIdTurmaActionPerformed(evt);
            }
        });

        txtVagas.setBorder(javax.swing.BorderFactory.createTitledBorder("Vagas"));
        txtVagas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtVagasActionPerformed(evt);
            }
        });

        txtDiasAulas.setBorder(javax.swing.BorderFactory.createTitledBorder("Dias Aulas"));
        jScrollPane2.setViewportView(txtDiasAulas);

        txtHorario.setBorder(javax.swing.BorderFactory.createTitledBorder("Horário"));
        jScrollPane3.setViewportView(txtHorario);

        btnCriar.setText("Criar");
        btnCriar.setActionCommand("Criar");
        btnCriar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCriarActionPerformed(evt);
            }
        });

        btnDeletar.setText("Deletar");
        btnDeletar.setActionCommand("Deletar");
        btnDeletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnAtualizar.setText("Atualizar");
        btnAtualizar.setActionCommand("Atualizar");
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ComboBoxIdTurma, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtVagas))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ComboBoxIdModalidade, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ComboBoxIdLocal, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnAtualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(btnCriar, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnDeletar, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ComboBoxIdModalidade, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                    .addComponent(ComboBoxIdLocal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ComboBoxIdTurma, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                    .addComponent(txtVagas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnCriar, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(btnDeletar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(btnAtualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ComboBoxIdLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxIdLocalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboBoxIdLocalActionPerformed

    private void ComboBoxIdModalidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxIdModalidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboBoxIdModalidadeActionPerformed

    private void ComboBoxIdTurmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxIdTurmaActionPerformed
        try {
            // Obtém a turma selecionada no ComboBox
            Turmas turma = (Turmas) ComboBoxIdTurma.getSelectedItem();

            // Preenche os campos com os dados da turma selecionada
            txtVagas.setText(turma.getVagas());
            txtDiasAulas.setText(turma.getDiasAulas());
            txtHorario.setText(turma.getHorario());

            // Define a modalidade e o local da turma selecionada nos ComboBoxes correspondentes
            ComboBoxIdModalidade.setSelectedItem(turma.getIdModalidade());
            ComboBoxIdLocal.setSelectedItem(turma.getIdLocal());

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao carregar dados da turma.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ComboBoxIdTurmaActionPerformed

    private void txtVagasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtVagasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtVagasActionPerformed

    private void btnCriarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCriarActionPerformed
        try {
            ModalidadesEsportivas modalidade = (ModalidadesEsportivas) ComboBoxIdModalidade.getSelectedItem();
            Locais local = (Locais) ComboBoxIdLocal.getSelectedItem();
            int    idModalidade = modalidade.getIdModalidade();
            String vagas = txtVagas.getText();
            String diasAulas = txtDiasAulas.getText();
            String horario = txtHorario.getText();
            //exibirMensagem("vagas:" + vagas + ", diasAulas:" + diasAulas + ", horario:" + horario + ", idModalidade: " + idModalidade+ ", getIdLocal: " + local.getIdLocal());

            Turmas turma = new Turmas(vagas, diasAulas, horario, idModalidade, local.getIdLocal());
  
            DaoTurmas daoTurmas = new DaoTurmas();
            daoTurmas.inserirTurma(turma);

            exibirMensagem("Turma criada com sucesso!");

            limparCampos();
            refreshCampos();
            carregarTurmas();
            
            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao criar turma.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCriarActionPerformed

    private void btnDeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletarActionPerformed
        try {
            Turmas turma = (Turmas) ComboBoxIdTurma.getSelectedItem(); // Obtém a turma selecionada no ComboBox

            int confirmacao = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja deletar a turma?", "Confirmação", JOptionPane.YES_NO_OPTION);
            if (confirmacao == JOptionPane.YES_OPTION) {
                daoTurmas.excluirTurma(turma.getIdTurmas()); // Chame o método para deletar a turma no DAO
                exibirMensagem("Turma deletada com sucesso!");
                
                limparCampos();
                refreshCampos();
                carregarTurmas();
                
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao deletar turma.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDeletarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
            TelaMenu menu = new TelaMenu();
            menu.setVisible(true);
            this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        try {
            Turmas turma = (Turmas) ComboBoxIdTurma.getSelectedItem();

            // Atualize os campos da turma com os valores dos campos de texto
            turma.setVagas(txtVagas.getText());
            turma.setDiasAulas(txtDiasAulas.getText());
            turma.setHorario(txtHorario.getText());

            // Obtenha a modalidade e o local selecionados nos ComboBoxes
            ModalidadesEsportivas modalidade = (ModalidadesEsportivas) ComboBoxIdModalidade.getSelectedItem();
            Locais local = (Locais) ComboBoxIdLocal.getSelectedItem();

            // Atualize a modalidade e o local da turma
            turma.setIdModalidade(modalidade.getIdModalidade());
            turma.setIdLocal(local.getIdLocal());

            // Atualize a turma no banco de dados
            daoTurmas.atualizarTurma(turma);

            exibirMensagem("Turma atualizada com sucesso!");
            

            limparCampos();
            refreshCampos();
            carregarTurmas();
            

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao atualizar turma.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAtualizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaTurmas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaTurmas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaTurmas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaTurmas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaTurmas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Locais> ComboBoxIdLocal;
    private javax.swing.JComboBox<ModalidadesEsportivas> ComboBoxIdModalidade;
    private javax.swing.JComboBox<Turmas> ComboBoxIdTurma;
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCriar;
    private javax.swing.JButton btnDeletar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextPane txtDiasAulas;
    private javax.swing.JTextPane txtHorario;
    private javax.swing.JTextField txtVagas;
    // End of variables declaration//GEN-END:variables
}
